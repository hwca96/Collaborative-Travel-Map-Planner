-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Trip"
(
    trip_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    trip_name "char" NOT NULL,
    trip_start_date date,
    trip_end_date date,
    trip_created_date date NOT NULL,
    PRIMARY KEY (trip_id)
);

CREATE TABLE IF NOT EXISTS public."User"
(
    user_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name "char" NOT NULL,
    email "char" NOT NULL,
    PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public."TripUserRecord"
(
    trip_user_record_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    trip_id integer NOT NULL,
    user_id integer NOT NULL,
    role "char" NOT NULL,
    PRIMARY KEY (trip_user_record_id)
);

CREATE TABLE IF NOT EXISTS public."TripAttractionRecord"
(
    trip_attraction_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    attraction_id integer NOT NULL,
    trip_id integer NOT NULL,
    user_created_id integer NOT NULL,
    added_date date NOT NULL,
    PRIMARY KEY (trip_attraction_id)
);

CREATE TABLE IF NOT EXISTS public."CommentRecord"
(
    commnet_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    trip_attraction_id integer NOT NULL,
    comment_text text NOT NULL,
    PRIMARY KEY (commnet_id)
);

CREATE TABLE IF NOT EXISTS public."Attraction"
(
    attraction_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    name "char" NOT NULL,
    type "char" NOT NULL,
    lat numeric NOT NULL,
    "long" numeric NOT NULL,
    country "char",
    state "char",
    city "char",
    PRIMARY KEY (attraction_id)
);

CREATE TABLE IF NOT EXISTS public."VotingRecord"
(
    voting_record_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    trip_attraction_id integer NOT NULL,
    user_id integer NOT NULL,
    star_value integer NOT NULL,
    PRIMARY KEY (voting_record_id)
);

ALTER TABLE IF EXISTS public."TripUserRecord"
    ADD FOREIGN KEY (trip_id)
    REFERENCES public."Trip" (trip_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."TripUserRecord"
    ADD FOREIGN KEY (user_id)
    REFERENCES public."User" (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."TripAttractionRecord"
    ADD FOREIGN KEY (trip_id)
    REFERENCES public."Trip" (trip_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."TripAttractionRecord"
    ADD FOREIGN KEY (attraction_id)
    REFERENCES public."Attraction" (attraction_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."CommentRecord"
    ADD FOREIGN KEY (user_id)
    REFERENCES public."User" (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."CommentRecord"
    ADD FOREIGN KEY (trip_attraction_id)
    REFERENCES public."TripAttractionRecord" (trip_attraction_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."VotingRecord"
    ADD FOREIGN KEY (user_id)
    REFERENCES public."User" (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."VotingRecord"
    ADD FOREIGN KEY (trip_attraction_id)
    REFERENCES public."TripAttractionRecord" (trip_attraction_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;